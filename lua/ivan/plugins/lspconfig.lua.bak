return {
  "neovim/nvim-lspconfig",
  dependencies = {
    "hrsh7th/cmp-nvim-lsp",
    "folke/neodev.nvim",
    -- { "folke/neodev.nvim", opts = {} }
  },
  config = function()
    -- Setup language servers.
    local lspconfig = require('lspconfig')
    local servers = {  -- TODO: deduplicate this and mason.lua
      "cssls",
      "emmet_ls",
      "graphql",
      "html",
      "lua_ls",
      "pyright",
      "rust_analyzer",
      "tsserver",
    }

    local skip = { rust_analyzer=1, lua_ls=1 } -- custom config below
    for _, server in ipairs(servers) do
      if not skip[server] then
        lspconfig[server].setup({})
      end
    end

    lspconfig.rust_analyzer.setup({
      -- Server-specific settings. See `:help lspconfig-setup`
      settings = {
        ['rust-analyzer'] = {},
      },
    })

    -- used to enable autocompletion (assign to every lsp server config)
    -- local capabilities = cmp_nvim_lsp.default_capabilities()
    -- nvim-cmp supports additional completion capabilities, so broadcast that to servers
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)
    -- local cmp_nvim_lsp = require("cmp_nvim_lsp")
    -- local capabilities = cmp_nvim_lsp.default_capabilities()

    -- configure lua server (with special settings)
    lspconfig.lua_ls.setup({
      capabilities = capabilities,
      -- on_attach = on_attach,
      settings = { -- custom settings for lua
        Lua = {
          diagnostics = {
            globals = { "vim" }, -- make the language server recognize "vim" global
          },
          workspace = {
            library = { -- make language server aware of runtime files
              vim.fn.expand("$VIMRUNTIME/lua"),
              vim.fn.stdpath("config") .. "/lua",
              require("neodev.config").types(),
            },
            checkThirdParty = false,
          },
          telemetry = { enable = false },
        },
      },
    })

    -- Global mappings.
    -- See `:help vim.diagnostic.*` for documentation on any of the below functions
    vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
    vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
    -- vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float)
    -- vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist)

    -- Use LspAttach autocommand to only map the following keys
    -- after the language server attaches to the current buffer
    vim.api.nvim_create_autocmd('LspAttach', {
      group = vim.api.nvim_create_augroup('UserLspConfig', {}),
      callback = function(ev)
        -- Enable completion triggered by <c-x><c-o>
        vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

        -- Buffer local mappings.
        local nmap = function(lhs, rhs)
          vim.keymap.set('n', lhs, rhs, { buffer = ev.buf })
        end

        -- See `:help vim.lsp.*` for documentation on any of the below functions
        local opts = { buffer = ev.buf }

        nmap('gd', vim.lsp.buf.definition)
        nmap('gD', vim.lsp.buf.declaration)
        nmap('K', vim.lsp.buf.hover)
        nmap('gi', vim.lsp.buf.implementation)
        -- nmap('<C-k>', vim.lsp.buf.signature_help)
        -- nmap('<leader>wa', vim.lsp.buf.add_workspace_folder)
        -- nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder)
        -- nmap('<leader>wl', function()
        --   print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
        -- end)
        nmap('<leader>D', vim.lsp.buf.type_definition)
        nmap('<leader>r', vim.lsp.buf.rename)
        nmap('gr', vim.lsp.buf.references)
        -- nmap('<leader>f', function()
        --   vim.lsp.buf.format { async = true }
        -- end)
        vim.keymap.set({ 'n', 'v' }, '<leader>ca', vim.lsp.buf.code_action, opts)

      end,
    })
  end,
}

